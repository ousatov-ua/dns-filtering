# This load of module is not needed if nginx compiled with --add-module=.../njs/nginx
#load_module modules/ngx_stream_js_module.so;

error_log  /var/log/nginx/error.log error;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

  # logging directives
  log_format  doh   '$remote_addr - $remote_user [$time_local] "$request" '
                    '[ $msec, $request_time, $upstream_response_time $pipe ] '
                    '$status $body_bytes_sent "$http_x_forwarded_for" '
                    '$upstream_http_x_dns_question $upstream_http_x_dns_type '
                    '$upstream_http_x_dns_result '
                    '$upstream_http_x_dns_ttl $upstream_http_x_dns_answers '
                    '$upstream_cache_status';
  access_log off;
  #access_log  /dev/null;
  #access_log  /var/log/nginx/doh-access.log doh;

  # This upstream connects to a local Stream service which converts HTTP -> DNS
  upstream dohloop {
    zone dohloop 64k;
    server 127.0.0.1:8053;
    keepalive_timeout 60s;
    keepalive_requests 100;
    keepalive 10;
  }
  # Proxy Cache storage - so we can cache the DoH response from the upstream
  proxy_cache_path /var/cache/nginx/doh_cache levels=1:2 keys_zone=doh_cache:10m;

  # The DoH server block
  server {

    # Listen on standard HTTPS port, and accept HTTP2, with SSL termination
    listen 443 ssl http2;
    ssl_certificate /opt/lego/ssl/olus-dns.com.crt;
    ssl_certificate_key /opt/lego/ssl/olus-dns.com.key;
    ssl_session_cache shared:ssl_cache:10m;
    ssl_session_timeout 10m;

    # DoH may use GET or POST requests, Cache both
    proxy_cache_methods GET POST;

    location / {
      return 444;
    }

    # add all clients
    location ~ ^/(dns-query/<client-id>) {
      include doh-mappings.conf;
    }
  }
}

# DNS Stream Services
stream {

  # DNS logging
  log_format  dns   '$remote_addr [$time_local] $protocol "$dns_qname"';
  access_log /var/log/nginx/dns-access.log dns;

  # Import the NJS module
  js_import /etc/nginx/njs.d/dns/dns.js;

  # The $dns_qname variable can be populated by preread calls, and can be used for DNS routing
  js_set $dns_qname dns.get_qname;

  # DNS upstream pool.
  upstream dns {
    zone dns 64k;
    server 127.0.0.1:53;
  }

  # DNS(UDP) Server
  # DNS UDP proxy onto DNS UDP
  server {
    listen 53 udp;
    proxy_responses 1;
    js_preread dns.preread_dns_request;
    proxy_pass dns;
  }

  # DNS over HTTPS (gateway) Service
  # Upstream can be either DNS(TCP) or DoT. If upstream is DNS, proxy_ssl should be off.
  server {
    listen 127.0.0.1:8053;
    js_filter dns.filter_doh_request;
    proxy_pass dns;
  }
}
  
